// Code generated by Civic Transparency schema generator; DO NOT EDIT.
//
// Source-schema:   series.schema.json
// Schema-sha256:   acf1664027df36e92afba906343a652cc07c12ebeb333467bed522cfb179c3b0
// Spec-version:    0.2.1
//
// This file contains the canonical Go representation of the schema above.
// JSON struct tags match the schema field names. Enumerations are expressed
// as typed string constants. Numeric and range constraints can be checked
// with the validation helpers in validation.go.  Package-level documentation
// is in doc.go.

package types

import "time"

// Interval represents the aggregation interval for a time series.
type Interval string

const (
	IntervalMinute Interval = "minute"
)

// Probability is a numeric value in [0.0,1.0] representing a probability.
// Use ValidateProbability to check range if needed.
type Probability float64

// CoordinationSignals captures per-interval coordination indicators.
type CoordinationSignals struct {
	BurstScore         Probability `json:"burst_score"`          // 0-1 burstiness indicator
	SynchronyIndex     Probability `json:"synchrony_index"`      // 0-1 temporal synchrony indicator
	DuplicationClusters int        `json:"duplication_clusters"` // count of duplicate/near-duplicate clusters (≥0)
}

// Point represents metrics for a single UTC minute boundary.
type Point struct {
	TS                  time.Time            `json:"ts"`                   // UTC minute boundary
	Volume              int                  `json:"volume"`               // total posts in this interval (≥0)
	ReshareRatio        Probability          `json:"reshare_ratio"`        // fraction of posts that are reshares (0-1)
	RecycledContentRate Probability          `json:"recycled_content_rate"`// fraction of posts recycling prior content (0-1)
	AcctAgeMix          map[string]Probability `json:"acct_age_mix"`       // distribution over account-age buckets (values ≈1.0)
	AutomationMix       map[string]Probability `json:"automation_mix"`     // distribution over automation flags (values ≈1.0)
	ClientMix           map[string]Probability `json:"client_mix"`         // distribution over client families (values ≈1.0)
	CoordinationSignals CoordinationSignals    `json:"coordination_signals"`// per-interval coordination indicators
}

// Series describes a full time series of Points for a specific topic.
type Series struct {
	Topic      string    `json:"topic"`        // Topic key (e.g., hashtag)
	GeneratedAt time.Time `json:"generated_at"` // UTC timestamp when this series was generated
	Interval    Interval  `json:"interval"`     // Aggregation interval
	Points      []Point   `json:"points"`       // Collection of per-interval metrics
}
